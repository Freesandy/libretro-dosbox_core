name: CI

on:
  push:
    branches: [libretro, ci_testing]

  pull_request:

jobs:
  build_mxe:
    strategy:
      matrix:
        config:
          - {triplet: i686-w64-mingw32.static, dynarec: x86, zip_name: windows-x86.zip}
          - {triplet: x86_64-w64-mingw32.static, dynarec: x86_64, zip_name: windows-x64.zip}

    runs-on: ubuntu-16.04

    env:
      CC: gcc
      platform: win
      TARGET_TRIPLET: ${{ matrix.config.triplet }}
      STATIC_LIBCXX: 0
      BUNDLED_AUDIO_CODECS: 0
      BUNDLED_LIBSNDFILE: 0
      BUNDLED_SDL: 0
      WITH_DYNAREC: ${{ matrix.config.dynarec }}

    steps:
    - uses: actions/checkout@v2
    - name: Init submodules
      run: git submodule update --depth 1 --init

    - name: Install deps
      run: sudo apt-get install
        ninja-build

    - name: Set up MXE environment
      run: wget -q 'https://github.com/realnc/stuff/releases/download/stuff/mxe.tar.xz' -O- | sudo tar xJ -C /opt

    - name: Build
      working-directory: ./libretro
      run: |
        source /opt/mxe/mxe-env.sh
        make deps
        make -j`nproc`
        ${{ matrix.config.triplet }}-strip dosbox_core_libretro.dll
        zip -9 ${{ matrix.config.zip_name }} dosbox_core_libretro.dll

    - name: Upload artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v1
      with:
        name: ${{ matrix.config.zip_name }}
        path: libretro/${{ matrix.config.zip_name }}

  build_linux_x64:
    runs-on: ubuntu-16.04

    env:
      CC: gcc-9
      CXX: g++-9
      platform: unix
      STATIC_LIBCXX: 1
      BUNDLED_AUDIO_CODECS: 1
      BUNDLED_LIBSNDFILE: 1
      BUNDLED_SDL: 1
      WITH_DYNAREC: x86_64

    steps:
    - uses: actions/checkout@v2
    - name: Init submodules
      run: git submodule update --depth 1 --init

    - name: Install deps
      run: sudo apt-get install
        libasound2-dev
        libglib2.0-dev
        ninja-build

    - name: Build
      working-directory: ./libretro
      run: |
        make deps
        make -j`nproc`
        strip dosbox_core_libretro.so
        zip -9 linux-x64.zip dosbox_core_libretro.so

    - name: Upload artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v1
      with:
        name: linux-x64.zip
        path: libretro/linux-x64.zip

  build_linux_arm:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Init submodules
      run: git submodule update --depth 1 --init

    - name: Install QEMU
      run: |
        sudo apt-get update
        sudo apt-get install -y qemu-user-static

    - name: Build
      run: |
        docker run \
          -v /usr/bin/qemu-arm-static:/usr/bin/qemu-arm-static \
          -v "$PWD":/build \
          -w /build/libretro \
          arm32v7/ubuntu:16.04 \
          bash -c '(
            set -eux
            apt-get update
            apt-get install -y software-properties-common wget
            add-apt-repository ppa:ubuntu-toolchain-r/test
            add-apt-repository ppa:janisozaur/cmake-update
            apt-get update
            apt-get install -y build-essential gcc-9 g++-9 cmake ninja-build git libasound2-dev libglib2.0-dev
            export CC=gcc-9
            export CXX=g++-9
            export platform=unix
            export STATIC_LIBCXX=1
            export BUNDLED_AUDIO_CODECS=1
            export BUNDLED_LIBSNDFILE=1
            export BUNDLED_SDL=1
            make -j1
            strip dosbox_core_libretro.so
          )'
        cd libretro
        zip -9 linux-armhf.zip dosbox_core_libretro.so

    - name: Upload artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v1
      with:
        name: linux-armhf.zip
        path: libretro/linux-armhf.zip

  build_macos:
    runs-on: macos-10.15

    env:
      CC: gcc-9
      CXX: g++-9
      platform: osx
      WITH_DYNAREC: x86_64
      STATIC_LIBCXX: 1
      BUNDLED_AUDIO_CODECS: 0
      BUNDLED_LIBSNDFILE: 0
      BUNDLED_SDL: 0
      PKG_CONFIG_FLAGS: --static
      MACOS_SDK_PATH: /usr/local/MacOSX10.14.sdk
      MACOS_DEPLOYMENT_TARGET: 10.13
      EXTRA_CMAKE_FLAGS: -DCMAKE_OSX_SYSROOT=/usr/local/MacOSX10.14.sdk -DCMAKE_OSX_DEPLOYMENT_TARGET=10.13

    steps:
    - uses: actions/checkout@v2
    - name: Init submodules
      run: git submodule update --depth 1 --init

    - name: Replace homebrew
      working-directory: /usr/local
      run: |
        sudo mkdir ~/oldbrew
        sudo mv * ~/oldbrew
        curl -s -S -L 'https://github.com/realnc/stuff/releases/download/stuff/homebrew-10.13.tar.xz' | sudo tar xJ
        rm bin/brew

    - name: Install 10.14 SDK
      working-directory: /usr/local
      run: |
        curl -s -S -L 'https://github.com/realnc/stuff/releases/download/stuff/MacOSX10.14.sdk.tar.xz' | sudo tar xJ

    # Since macOS is developed by monkeys, we have to do this shit to get static linking against
    # homebrew-installed libraries.
    - name: Symlink static homebrew libs
      working-directory: /usr/local
      run: |
        sudo mkdir static_libs
        sudo ln -s /usr/local/{lib,opt/libffi/lib}/*.a static_libs/

    - name: Build
      working-directory: ./libretro
      run: |
        make deps
        export LDFLAGS="-L /usr/local/static_libs"
        make -j`sysctl -n hw.ncpu`
        strip -u -r -S dosbox_core_libretro.dylib
        zip -9 macOS-x64.zip dosbox_core_libretro.dylib

    - name: Upload artifact
      if: github.event_name != 'pull_request'
      uses: actions/upload-artifact@v1
      with:
        name: macOS-x64.zip
        path: libretro/macOS-x64.zip

  upload_build:
    if: github.event_name == 'push' && github.ref == 'refs/heads/libretro'
    runs-on: ubuntu-16.04
    needs: [build_mxe, build_linux_x64, build_macos, build_linux_arm]

    steps:
    - uses: actions/download-artifact@v1
      with:
        name: windows-x64.zip
    - uses: actions/download-artifact@v1
      with:
        name: windows-x86.zip
    - uses: actions/download-artifact@v1
      with:
        name: linux-x64.zip
    - uses: actions/download-artifact@v1
      with:
        name: macOS-x64.zip
    - uses: actions/download-artifact@v1
      with:
        name: linux-armhf.zip

    - uses: marvinpinto/action-automatic-releases@latest
      with:
        repo_token: "${{ secrets.GITHUB_TOKEN }}"
        automatic_release_tag: "latest_build"
        prerelease: true
        title: "Latest Build"
        files: |
          windows-x64.zip
          windows-x86.zip
          linux-x64.zip
          macOS-x64.zip
          linux-armhf.zip
